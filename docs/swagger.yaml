openapi: 3.0.3
info:
  title: Sejiwa - Anonymous Talk Space API
  description: |
    Sejiwa API provides endpoints for an anonymous mental health discussion platform.
    The API supports user authentication, thread management, moderation, and secure anonymous communication.
  version: 1.0.0
  contact:
    name: Sejiwa Development Team
    email: dev@sejiwa.app
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.sejiwa.app/v1
    description: Production server
  - url: https://staging-api.sejiwa.app/v1
    description: Staging server
  - url: http://localhost:8080/v1
    description: Development server

security:
  - BearerAuth: []

paths:
  # Authentication Endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new anonymous user
      description: Create a new user account with anonymous username and password (user role only)
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          description: Username already exists
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "USERNAME_ALREADY_EXISTS"
        "422":
          $ref: "#/components/responses/ValidationError"
        "429":
          $ref: "#/components/responses/RateLimitError"

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login with username and password
      description: Authenticate user and return JWT token (all roles)
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "AUTH_INVALID_CREDENTIALS"
        "423":
          description: Account locked due to too many failed attempts
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "ACCOUNT_LOCKED"
                      locked_until:
                        type: string
                        format: date-time
        "429":
          $ref: "#/components/responses/RateLimitError"

    options:
      tags:
        - Authentication
      summary: Login options
      description: Get available authentication options and CORS preflight
      security: []
      responses:
        "200":
          description: Login options
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth_methods:
                    type: array
                    items:
                      type: string
                      enum: [username_password, oauth]
                  password_requirements:
                    type: object
                    properties:
                      min_length:
                        type: integer
                        example: 8
                      requires_special_char:
                        type: boolean
                        example: true
                      requires_number:
                        type: boolean
                        example: true

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidate user session and JWT token
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"

    delete:
      tags:
        - Authentication
      summary: Force logout from all devices
      description: Invalidate all user sessions and JWT tokens across all devices
      responses:
        "200":
          description: All sessions terminated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      sessions_terminated:
                        type: integer
                        description: Number of sessions terminated
                      devices:
                        type: array
                        items:
                          type: object
                          properties:
                            device_id:
                              type: string
                            last_active:
                              type: string
                              format: date-time
        "401":
          $ref: "#/components/responses/Unauthorized"

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      description: Get a new JWT token using refresh token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "REFRESH_TOKEN_INVALID"

    get:
      tags:
        - Authentication
      summary: Get token status
      description: Check current token validity and expiration
      responses:
        "200":
          description: Token status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                  expires_in:
                    type: integer
                    description: Seconds until token expiration
                  issued_at:
                    type: string
                    format: date-time
                  refresh_token_valid:
                    type: boolean
        "401":
          $ref: "#/components/responses/Unauthorized"

  # Admin Authentication & Management Endpoints
  /admin/auth/create-admin:
    post:
      tags:
        - Admin Management
      summary: Create new admin account
      description: Create a new admin account (admin only). Initial admin is seeded from backend.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAdminRequest"
      responses:
        "201":
          description: Admin account created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      admin:
                        $ref: "#/components/schemas/ModeratorProfile"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden - admin only
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "ADMIN_ONLY"
        "409":
          description: Username already exists
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "USERNAME_ALREADY_EXISTS"
        "422":
          $ref: "#/components/responses/ValidationError"

  /admin/auth/create-moderator:
    post:
      tags:
        - Admin Management
      summary: Create new moderator account
      description: Create a new moderator account (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateModeratorRequest"
      responses:
        "201":
          description: Moderator account created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      moderator:
                        $ref: "#/components/schemas/ModeratorProfile"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden - admin only
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "ADMIN_ONLY"
        "409":
          description: Username already exists
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "USERNAME_ALREADY_EXISTS"
        "422":
          $ref: "#/components/responses/ValidationError"

  # Moderator Management Endpoints
  /admin/moderators:
    get:
      tags:
        - Admin Management
      summary: Get all moderators
      description: Retrieve list of all admins and moderators (admin only)
      parameters:
        - name: role
          in: query
          description: Filter by role
          schema:
            type: string
            enum: [admin, moderator]
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
            enum: [active, inactive, suspended]
            default: active
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        "200":
          description: Moderator list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ModeratorProfile"
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden - admin only
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "ADMIN_ONLY"

    post:
      tags:
        - Admin Management
      summary: Bulk create moderators
      description: Create multiple moderator accounts at once (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - moderators
              properties:
                moderators:
                  type: array
                  items:
                    $ref: "#/components/schemas/CreateModeratorRequest"
                  minItems: 1
                  maxItems: 10
      responses:
        "201":
          description: Moderators created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  message:
                    type: string
                    example: "Moderators created successfully"
                  created:
                    type: array
                    items:
                      $ref: "#/components/schemas/ModeratorProfile"
                  failed:
                    type: array
                    items:
                      type: object
                      properties:
                        username:
                          type: string
                        reason:
                          type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden - admin only
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "ADMIN_ONLY"
        "422":
          $ref: "#/components/responses/ValidationError"

    patch:
      tags:
        - Admin Management
      summary: Bulk update moderators
      description: Update multiple moderator accounts at once (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - moderator_ids
                - updates
              properties:
                moderator_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                  minItems: 1
                  maxItems: 20
                updates:
                  $ref: "#/components/schemas/UpdateModeratorRequest"
      responses:
        "200":
          description: Moderators updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  message:
                    type: string
                    example: "Moderators updated successfully"
                  updated_count:
                    type: integer
                  failed:
                    type: array
                    items:
                      type: object
                      properties:
                        moderator_id:
                          type: string
                          format: uuid
                        reason:
                          type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden - admin only
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "ADMIN_ONLY"
        "422":
          $ref: "#/components/responses/ValidationError"

  /admin/moderators/{moderator_id}:
    get:
      tags:
        - Admin Management
      summary: Get moderator details
      description: Retrieve detailed information about a specific moderator (admin only)
      parameters:
        - name: moderator_id
          in: path
          required: true
          description: Moderator ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Moderator details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModeratorDetailProfile"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden - admin only
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "ADMIN_ONLY"
        "404":
          description: Moderator not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "MODERATOR_NOT_FOUND"

    patch:
      tags:
        - Admin Management
      summary: Update moderator
      description: Update moderator information (admin only)
      parameters:
        - name: moderator_id
          in: path
          required: true
          description: Moderator ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateModeratorRequest"
      responses:
        "200":
          description: Moderator updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModeratorDetailProfile"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden - admin only or cannot modify own role
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "ADMIN_ONLY"
        "404":
          description: Moderator not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "MODERATOR_NOT_FOUND"
        "422":
          $ref: "#/components/responses/ValidationError"

    put:
      tags:
        - Admin Management
      summary: Replace moderator
      description: Replace all moderator information (admin only)
      parameters:
        - name: moderator_id
          in: path
          required: true
          description: Moderator ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - full_name
                - status
                - permissions
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 30
                  pattern: "^[a-zA-Z0-9_-]+$"
                email:
                  type: string
                  format: email
                full_name:
                  type: string
                  maxLength: 100
                status:
                  type: string
                  enum: [active, inactive, suspended]
                permissions:
                  type: array
                  items:
                    type: string
                    enum:
                      [
                        manage_reports,
                        ban_users,
                        delete_content,
                        manage_categories,
                      ]
                password:
                  type: string
                  description: Optional - if provided, will update password
      responses:
        "200":
          description: Moderator replaced successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModeratorDetailProfile"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden - admin only or cannot modify own role
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "ADMIN_ONLY"
        "404":
          description: Moderator not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "MODERATOR_NOT_FOUND"
        "422":
          $ref: "#/components/responses/ValidationError"

    delete:
      tags:
        - Admin Management
      summary: Deactivate moderator
      description: Deactivate/suspend moderator (admin only, cannot deactivate self)
      parameters:
        - name: moderator_id
          in: path
          required: true
          description: Moderator ID
          schema:
            type: string
            format: uuid
        - name: reason
          in: query
          required: true
          description: Reason for deactivation
          schema:
            type: string
            enum: [resigned, terminated, suspended, other]
        - name: notes
          in: query
          description: Optional notes about deactivation
          schema:
            type: string
            maxLength: 500
      responses:
        "200":
          description: Moderator deactivated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      deactivated_at:
                        type: string
                        format: date-time
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden - admin only or cannot deactivate self
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "CANNOT_DEACTIVATE_SELF"
        "404":
          description: Moderator not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "MODERATOR_NOT_FOUND"

  # User Profile Endpoints
  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Retrieve current authenticated user's profile information (available to all authenticated users)
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/UserProfile"
                  - $ref: "#/components/schemas/ModeratorProfile"
                discriminator:
                  propertyName: role
                  mapping:
                    user: "#/components/schemas/UserProfile"
                    admin: "#/components/schemas/ModeratorProfile"
                    moderator: "#/components/schemas/ModeratorProfile"
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      tags:
        - Users
      summary: Update user profile
      description: Update current user's profile information (limited fields, available to all authenticated users)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/UserProfile"
                  - $ref: "#/components/schemas/ModeratorProfile"
                discriminator:
                  propertyName: role
                  mapping:
                    user: "#/components/schemas/UserProfile"
                    admin: "#/components/schemas/ModeratorProfile"
                    moderator: "#/components/schemas/ModeratorProfile"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          description: Username already exists
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "USERNAME_ALREADY_EXISTS"
        "422":
          $ref: "#/components/responses/ValidationError"

    delete:
      tags:
        - Users
      summary: Delete user account
      description: Permanently delete the current user's account and all associated data
      parameters:
        - name: confirmation
          in: query
          required: true
          description: Confirmation code to prevent accidental deletion
          schema:
            type: string
            pattern: "^DELETE-MY-ACCOUNT$"
      responses:
        "200":
          description: Account deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid confirmation code
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "INVALID_CONFIRMATION"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Admin accounts cannot be self-deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "ADMIN_DELETION_FORBIDDEN"

  # Categories Endpoints
  /categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      description: Retrieve list of all available discussion categories
      security: []
      parameters:
        - name: active_only
          in: query
          description: Filter only active categories
          schema:
            type: boolean
            default: true
      responses:
        "200":
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Category"
                  meta:
                    $ref: "#/components/schemas/MetaResponse"

    post:
      tags:
        - Categories
      summary: Create category
      description: Create a new discussion category (admin/moderator only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 50
                description:
                  type: string
                  minLength: 10
                  maxLength: 500
                slug:
                  type: string
                  pattern: "^[a-z0-9-]+$"
                  description: Optional URL-friendly name (generated from name if not provided)
                color:
                  type: string
                  pattern: "^#[0-9A-Fa-f]{6}$"
                  default: "#6C757D"
                is_active:
                  type: boolean
                  default: true
      responses:
        "201":
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "INSUFFICIENT_PERMISSIONS"
        "409":
          description: Category name/slug already exists
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "CATEGORY_ALREADY_EXISTS"
        "422":
          $ref: "#/components/responses/ValidationError"

    put:
      tags:
        - Categories
      summary: Bulk update categories
      description: Update multiple categories at once (admin/moderator only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - categories
              properties:
                categories:
                  type: array
                  items:
                    type: object
                    required:
                      - id
                    properties:
                      id:
                        type: string
                        format: uuid
                      name:
                        type: string
                        minLength: 3
                        maxLength: 50
                      description:
                        type: string
                        minLength: 10
                        maxLength: 500
                      slug:
                        type: string
                        pattern: "^[a-z0-9-]+$"
                      color:
                        type: string
                        pattern: "^#[0-9A-Fa-f]{6}$"
                      is_active:
                        type: boolean
                  minItems: 1
                  maxItems: 20
      responses:
        "200":
          description: Categories updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  message:
                    type: string
                    example: "Categories updated successfully"
                  updated_count:
                    type: integer
                  failed:
                    type: array
                    items:
                      type: object
                      properties:
                        category_id:
                          type: string
                          format: uuid
                        reason:
                          type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "INSUFFICIENT_PERMISSIONS"
        "422":
          $ref: "#/components/responses/ValidationError"

  # Add category by ID endpoint
  /categories/{category_id}:
    get:
      tags:
        - Categories
      summary: Get category by ID
      description: Retrieve detailed information about a specific category
      security: []
      parameters:
        - name: category_id
          in: path
          required: true
          description: Category ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "CATEGORY_NOT_FOUND"

    patch:
      tags:
        - Categories
      summary: Update category
      description: Update an existing category (admin/moderator only)
      parameters:
        - name: category_id
          in: path
          required: true
          description: Category ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 50
                description:
                  type: string
                  minLength: 10
                  maxLength: 500
                slug:
                  type: string
                  pattern: "^[a-z0-9-]+$"
                color:
                  type: string
                  pattern: "^#[0-9A-Fa-f]{6}$"
                is_active:
                  type: boolean
      responses:
        "200":
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "INSUFFICIENT_PERMISSIONS"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "CATEGORY_NOT_FOUND"
        "409":
          description: Category name/slug already exists
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "CATEGORY_ALREADY_EXISTS"
        "422":
          $ref: "#/components/responses/ValidationError"

    delete:
      tags:
        - Categories
      summary: Delete category
      description: Delete a category (admin only, can't delete categories with active threads)
      parameters:
        - name: category_id
          in: path
          required: true
          description: Category ID
          schema:
            type: string
            format: uuid
        - name: force
          in: query
          description: Force delete even if category has threads (will move threads to default category)
          schema:
            type: boolean
            default: false
        - name: target_category_id
          in: query
          description: Category ID to move threads to (required if force=true)
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Category deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      threads_moved:
                        type: integer
                        description: Number of threads moved to target category (if force=true)
        "400":
          description: Bad request (e.g., force=true but no target_category_id)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "TARGET_CATEGORY_REQUIRED"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden - admin only or category has threads
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "CATEGORY_HAS_THREADS"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "CATEGORY_NOT_FOUND"

  # Threads Endpoints
  /threads:
    get:
      tags:
        - Threads
      summary: Get threads list
      description: Retrieve paginated list of discussion threads (excludes hidden/deleted threads)
      security: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: category_id
          in: query
          description: Filter by category ID
          schema:
            type: string
            format: uuid
        - name: sort
          in: query
          description: Sort order
          schema:
            type: string
            enum: [latest, popular, oldest, most_replies]
            default: latest
        - name: search
          in: query
          description: Search keyword in title and content
          schema:
            type: string
            maxLength: 100
      responses:
        "200":
          description: Threads retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ThreadSummary"
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
        "400":
          $ref: "#/components/responses/BadRequest"

    head:
      tags:
        - Threads
      summary: Check threads list metadata
      description: Get HTTP headers with thread count information without retrieving content
      security: []
      parameters:
        - name: category_id
          in: query
          description: Filter by category ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Thread count information retrieved in headers
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total number of threads
            X-Total-Pages:
              schema:
                type: integer
              description: Total number of pages
            X-New-Threads-Today:
              schema:
                type: integer
              description: Number of threads created today
            X-Last-Updated:
              schema:
                type: string
                format: date-time
              description: Timestamp of most recently updated thread

    post:
      tags:
        - Threads
      summary: Create new thread
      description: Create a new discussion thread
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateThreadRequest"
      responses:
        "201":
          description: Thread created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadDetail"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "CATEGORY_NOT_FOUND"
        "422":
          $ref: "#/components/responses/ValidationError"
        "429":
          $ref: "#/components/responses/RateLimitError"

    options:
      tags:
        - Threads
      summary: Thread creation options
      description: Get available options for thread creation
      security: []
      responses:
        "200":
          description: Thread creation options
          content:
            application/json:
              schema:
                type: object
                properties:
                  max_title_length:
                    type: integer
                    example: 200
                  max_content_length:
                    type: integer
                    example: 10000
                  edit_time_limit_minutes:
                    type: integer
                    example: 30
                  available_categories:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string

  /threads/{thread_id}:
    get:
      tags:
        - Threads
      summary: Get thread details
      description: Retrieve detailed information about a specific thread including replies (excludes hidden/deleted content)
      security: []
      parameters:
        - name: thread_id
          in: path
          required: true
          description: Thread ID
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number for replies pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of replies per page
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
      responses:
        "200":
          description: Thread details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadDetailWithReplies"
        "404":
          description: Thread not found or hidden
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "THREAD_NOT_FOUND"

    head:
      tags:
        - Threads
      summary: Check thread metadata
      description: Get HTTP headers with thread information without retrieving content
      security: []
      parameters:
        - name: thread_id
          in: path
          required: true
          description: Thread ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Thread metadata retrieved in headers
          headers:
            X-Thread-Title:
              schema:
                type: string
              description: Thread title
            X-Thread-Category:
              schema:
                type: string
              description: Thread category name
            X-Reply-Count:
              schema:
                type: integer
              description: Number of replies
            X-Thread-Created:
              schema:
                type: string
                format: date-time
              description: When thread was created
            X-Thread-Updated:
              schema:
                type: string
                format: date-time
              description: When thread was last updated
            X-Thread-Locked:
              schema:
                type: boolean
              description: Whether thread is locked
        "404":
          description: Thread not found or hidden

    patch:
      tags:
        - Threads
      summary: Update thread
      description: Update thread details (only by thread author within edit time limit)
      parameters:
        - name: thread_id
          in: path
          required: true
          description: Thread ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateThreadRequest"
      responses:
        "200":
          description: Thread updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadDetail"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden - not thread author or edit time exceeded
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "THREAD_EDIT_FORBIDDEN"
        "404":
          description: Thread not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "THREAD_NOT_FOUND"
        "410":
          description: Thread is locked
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "THREAD_LOCKED"
        "422":
          $ref: "#/components/responses/ValidationError"

    put:
      tags:
        - Threads
      summary: Set thread state
      description: Set thread state (moderator/admin only)
      parameters:
        - name: thread_id
          in: path
          required: true
          description: Thread ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum: [pin, unpin, lock, unlock]
                reason:
                  type: string
                  maxLength: 500
                  description: Reason for action (will be displayed to users if provided)
                lock_duration_hours:
                  type: integer
                  minimum: 1
                  maximum: 720
                  description: If action=lock, duration in hours (null means permanent)
      responses:
        "200":
          description: Thread state updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      thread:
                        $ref: "#/components/schemas/ThreadDetail"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden - moderator/admin only
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "INSUFFICIENT_PERMISSIONS"
        "404":
          description: Thread not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "THREAD_NOT_FOUND"
        "422":
          $ref: "#/components/responses/ValidationError"

    delete:
      tags:
        - Threads
      summary: Delete thread (soft delete)
      description: Soft delete thread (only by thread author or moderator) - marks as hidden rather than physical deletion
      parameters:
        - name: thread_id
          in: path
          required: true
          description: Thread ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Thread deleted successfully (soft delete)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      deleted_at:
                        type: string
                        format: date-time
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden - not thread author or moderator
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "THREAD_DELETE_FORBIDDEN"
        "404":
          description: Thread not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "THREAD_NOT_FOUND"

  # Replies Endpoints
  /threads/{thread_id}/replies:
    get:
      tags:
        - Replies
      summary: Get thread replies
      description: Retrieve paginated list of replies for a specific thread
      security: []
      parameters:
        - name: thread_id
          in: path
          required: true
          description: Thread ID
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
        - name: sort
          in: query
          description: Sort order
          schema:
            type: string
            enum: [newest, oldest]
            default: oldest
      responses:
        "200":
          description: Replies retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Reply"
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
        "404":
          description: Thread not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "THREAD_NOT_FOUND"

    post:
      tags:
        - Replies
      summary: Create reply
      description: Add a reply to a thread
      parameters:
        - name: thread_id
          in: path
          required: true
          description: Thread ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReplyRequest"
      responses:
        "201":
          description: Reply created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reply"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: Thread not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "THREAD_NOT_FOUND"
        "410":
          description: Thread is locked
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "THREAD_LOCKED"
        "422":
          $ref: "#/components/responses/ValidationError"
        "429":
          $ref: "#/components/responses/RateLimitError"

  /replies/{reply_id}:
    get:
      tags:
        - Replies
      summary: Get reply by ID
      description: Get a specific reply by its ID
      security: []
      parameters:
        - name: reply_id
          in: path
          required: true
          description: Reply ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Reply retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reply"
        "404":
          description: Reply not found or hidden
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "REPLY_NOT_FOUND"

    patch:
      tags:
        - Replies
      summary: Update reply
      description: Update reply content (only by reply author within edit time limit)
      parameters:
        - name: reply_id
          in: path
          required: true
          description: Reply ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateReplyRequest"
      responses:
        "200":
          description: Reply updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reply"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden - not reply author or edit time exceeded
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "REPLY_EDIT_FORBIDDEN"
        "404":
          description: Reply not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "REPLY_NOT_FOUND"
        "410":
          description: Thread is locked
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "THREAD_LOCKED"
        "422":
          $ref: "#/components/responses/ValidationError"

    put:
      tags:
        - Replies
      summary: Replace reply
      description: Replace entire reply content (only by reply author within edit time limit)
      parameters:
        - name: reply_id
          in: path
          required: true
          description: Reply ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateReplyRequest"
      responses:
        "200":
          description: Reply replaced successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reply"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden - not reply author or edit time exceeded
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "REPLY_EDIT_FORBIDDEN"
        "404":
          description: Reply not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "REPLY_NOT_FOUND"
        "410":
          description: Thread is locked
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "THREAD_LOCKED"
        "422":
          $ref: "#/components/responses/ValidationError"

    delete:
      tags:
        - Replies
      summary: Delete reply (soft delete)
      description: Soft delete reply (only by reply author or moderator) - marks as hidden rather than physical deletion
      parameters:
        - name: reply_id
          in: path
          required: true
          description: Reply ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Reply deleted successfully (soft delete)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      deleted_at:
                        type: string
                        format: date-time
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden - not reply author or moderator
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "REPLY_DELETE_FORBIDDEN"
        "404":
          description: Reply not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "REPLY_NOT_FOUND"

  # Reporting & Moderation Endpoints
  /reports:
    get:
      tags:
        - Reports
      summary: Get user's reports
      description: Retrieve list of reports submitted by the current user
      parameters:
        - name: status
          in: query
          description: Filter by report status
          schema:
            type: string
            enum: [pending, reviewed, resolved]
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
      responses:
        "200":
          description: Reports retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Report"
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
        "401":
          $ref: "#/components/responses/Unauthorized"

    post:
      tags:
        - Reports
      summary: Report content
      description: Report inappropriate content for moderation review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReportRequest"
      responses:
        "201":
          description: Report submitted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: Reported content not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "CONTENT_NOT_FOUND"
        "409":
          description: Content already reported by this user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "ALREADY_REPORTED"
        "422":
          $ref: "#/components/responses/ValidationError"
        "429":
          $ref: "#/components/responses/RateLimitError"

  # Moderation Endpoints (Admin/Moderator only)
  /moderation/reports:
    get:
      tags:
        - Moderation
      summary: Get reports for moderation
      description: Retrieve list of reports for moderator review (moderator/admin only)
      parameters:
        - name: status
          in: query
          description: Filter by report status
          schema:
            type: string
            enum: [pending, reviewed, resolved]
            default: pending
        - name: priority
          in: query
          description: Filter by report priority (based on reason)
          schema:
            type: string
            enum: [low, medium, high, critical]
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        "200":
          description: Reports retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ModerationReport"
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - type: object
                    properties:
                      code:
                        type: string
                        example: "INSUFFICIENT_PERMISSIONS"

    head:
      tags:
        - Moderation
      summary: Check report queue status
      description: Get HTTP headers with report queue information without retrieving content
      responses:
        "200":
          description: Report queue information retrieved in headers
          headers:
            X-Total-Pending:
              schema:
                type: integer
              description: Total number of pending reports
            X-Critical-Reports:
              schema:
                type: integer
              description: Number of critical priority reports
            X-High-Reports:
              schema:
                type: integer
              description: Number of high priority reports
            X-Oldest-Report:
              schema:
                type: string
                format: date-time
              description: Timestamp of oldest pending report
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden - insufficient permissions

    patch:
      tags:
        - Moderation
      summary: Bulk update report status
      description: Update status of multiple reports at once (moderator/admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - report_ids
                - status
              properties:
                report_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                  minItems: 1
                  maxItems: 50
                status:
                  type: string
                  enum: [pending, reviewed, resolved]
                notes:
                  type: string
                  maxLength: 500
                  description: Optional notes about the update
      responses:
        "200":
          description: Reports updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated_count:
                    type: integer
                    description: Number of reports updated
                    example: 5
                    minimum: 0
